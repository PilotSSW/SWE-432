#!/usr/bin/env node
var api = require('../src/api.json')
var isRequired = param=> param.required === 'Required'
var _ = require('lodash')

// gimme an array of all the methods in the form 
// [['param1', 'param2', 'method.name'], etc]
var allMethods = Object.keys(api).sort().map(method=> {
  return api[method].filter(isRequired).map(param=> param.name).concat(method)
})

// filter the array by methods that require token
var tokened = allMethods.filter(x=> x[0] === 'token')

// get the namespaces
var ns = tokened
           .map(x=>_.last(x)) // get methods
           .map(x=>x.split('.')) // split them
           .map(x=>_.dropRight(x, 1)) // remove the actual method part

// generate the client with all methods bound with token
// front matter in str
var str = `
// generated by ./scripts/generate-stateful-client
export default function client(token) {
  var applied = {}
`
// apply all the slack name spacing
_.uniqWith(ns, _.isEqual).forEach(name=> {
  // name = [foo, bar]
  var first = _.first(name)
  var rest = _.drop(name, 1)
  str += `  applied.${first}`
  if (rest) {
    rest.forEach(space=> {
      str += '.' + space
    })
  }
  str += ' = {}\n'
})

tokened.forEach(t=> {
  var methodName = _.last(t)
  str += `  applied.${methodName} = function (params, callback) {
    params.token = token
    require('./${methodName}').call({}, params, callback)
  }\n`
})

str += `
  return applied
}
`

console.log(str)
