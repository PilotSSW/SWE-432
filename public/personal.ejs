<!DOCTYPE HTML>
<html lang="en">
	<head>
        <% include head %>
    </head>

  <body onload="init()">
    <div class="container-fluid">
      <% include navbar %>

      <div class="content">
        <div id="thelist" class="row"><h3>Tasks</h3></div>
        <hr/>
        <div class="row"><h3>Journal</h3></div>
        <div id="firepad-container"></div>
        <script type="text/babel">

            "use strict";
            // Initialize Firebase
            var config = {
                apiKey: "AIzaSyA2d80wrdiDQ3Vw999T8HqvYXcG8KBVcEs",
                authDomain: "unityos-88808.firebaseapp.com",
                databaseURL: "https://unityos-88808.firebaseio.com",
                storageBucket: "unityos-88808.appspot.com",
                messagingSenderId: "761255611285"
            };
            
            firebase.initializeApp(config);

            var TodoList = React.createClass({
                render: function () {
                    var _this = this; //In the subcomponent, "this" will refer to window, so need to save "this" here
                    var createItem = function (item, key) {
                        return (<div key={key} class="todoline">
                                    <input type="checkbox" id="checkbox" onChange={_this.props.onChange.bind(null, item['.key'])} value={item.checked}/>
                                    <input type="text" id="task" onChange={_this.props.onChange.bind(null, item['.key'])} value={item.task}/>
                                    <input type="time" id="time" onChange={_this.props.onChange.bind(null, item['.key'])} value={item.time}/>
                                    <input type="date" id="date" onChange={_this.props.onChange.bind(null, item['.key'])} value={item.date}/>
                                    <button onClick={_this.props.removeItem.bind(null, item['.key'])}>&#x2716;</button>
                                </div>);
                    };
                    return <ul>{this.props.items.map(createItem)}</ul>;
                }
            });

            var TodoApp = React.createClass({
                mixins: [ReactFireMixin],
                getInitialState: function () {
                    return {items: []};
                },
                componentWillMount: function () {
                    this.fireRef = firebase.database().ref('todos');
                    this.bindAsArray(this.fireRef, "items");
                },
                handleChange: function (key) {
                    return function (e) {
                        var state = {};
                        state[key] = e.target.value;
                        this.setState(state);
                    }.bind(this);
                },
                onChange: function (fireKey, event) {
                    this.fireRef.child(fireKey).set({"checkbox": event.target.checked, "text": event.target.task, "time":event.target.time, "date":event.target.date});
                },
                removeItem: function (key) {
                    $.post("http://localhost:3000/deleteTodo",{ key: key});
                },
                handleAdd: function (e) {
                    var newText = $("#newTodo").val();
                    $.post("http://localhost:3000/newTodo",{ todoText: newText});
                    $("#newTodo").val("");
                },
                handleUpdate: function (fireKey, e) {
                    $.post("http://localhost:3000/editTodo",{ todoText: e.target.value, key: fireKey});
                },
                render: function() {
                    return (
                        <div>
                            <h3>Tasks </h3>
                            <TodoList items={this.state.items} removeItem={this.removeItem}
                                    onChange={this.onChange}/>
                            <button onClick={this.handleAdd}>New</button>
                        </div>
                    );
                }
            });
            ReactDOM.render(<TodoApp />, document.getElementById('thelist'));



            //////////////////////// Jasmine Tests -- Carl Bednar ////////

            describe("New Todo", function(){
                var newPost;

                beforeEach(function() {
                    newToDo = new newToDo({
                        checkbox: "nil",
                        event : "Water the Dog",
                        time : "12:12",
                        date : "10/10/2010"
                    });

                    describe("ToEqual", function() {
                        it("should have an unchecked box", function(){
                            expect(newToDo.checkbox).toEqual("nil");
                        });
                        it("should have a dog watering activity", function() {
                            expect(newToDo.event).toEqual("Water the Dog");
                        });
                        it("should have a time after noon", function() {
                            expect(newToDo.time).toEqual("12:12");
                        });
                        it("should have a date in the past", function() {
                            expect(newToDo.date).toEqual("10/10/2010");
                        });
                    });
                });

                beforeEach(function() {
                    newPost.checkbox = "checked";

                    describe("Completed tasks", function() {
                        it("should have a checked box", function() {
                            expect(checkbox).toEqual("checked");
                        });
                    });

                });

                //////////////////////// Jasmine Tests -- Sean Wolford ///////////
                //////////////////////// Jasmine Tests -- Test Empty todo line ///
                describe("ToEqual", function() {
                    var todo = n
                    it("should have a checked box", function(){
                        expect(ToDo.item.props.checkbox).toEqual("checked");
                    });
                    it("", function() {
                        expect(ToDo.item.props.todo).toEqual("NIL");
                    });
                    it("", function() {
                        expect(ToDo.item.props.time).toEqual("--:-- --");
                    });
                    it("should have a date in the past", function() {
                        expect(ToDo.item.props.date).toEqual("mm/dd/yyyy");
                    });
                });
                var h1 = TestUtils.findRenderedDOMComponentWithTag(component, 'h1');

            });
        </script>

        <script type="text/javascript">
            function init() {
                //// Initialize Firebase.
                //// TODO: replace with your Firebase project configuration.

                //// Get Firebase Database reference.
                var firepadRef = getExampleRef();
                //// Create CodeMirror (with lineWrapping on).
                var codeMirror = CodeMirror(document.getElementById('firepad-container'), { lineWrapping: true });
                //// Create Firepad (with rich text toolbar and shortcuts enabled).
                var firepad = Firepad.fromCodeMirror(firepadRef, codeMirror,
                        { richTextToolbar: true, richTextShortcuts: true });
                //// Initialize contents.
                firepad.on('ready', function() {
                    if (firepad.isHistoryEmpty()) {
                        firepad.setHtml(
                                '<span style="font-size: 24px;">Rich-text editing with <span style="color: red">Firepad!</span></span><br/>\n' +
                                '<br/>' +
                                '<div style="font-size: 18px">' +
                                'Supports:<br/>' +
                                '<ul>' +
                                '<li>Different ' +
                                '<span style="font-family: impact">fonts,</span>' +
                                '<span style="font-size: 24px;"> sizes, </span>' +
                                '<span style="color: blue">and colors.</span>' +
                                '</li>' +
                                '<li>' +
                                '<b>Bold, </b>' +
                                '<i>italic, </i>' +
                                '<u>and underline.</u>' +
                                '</li>' +
                                '<li>Lists' +
                                '<ol>' +
                                '<li>One</li>' +
                                '<li>Two</li>' +
                                '</ol>' +
                                '</li>' +
                                '<li>Undo / redo</li>' +
                                '<li>Cursor / selection synchronization.</li>' +
                                '<li><checkbox></checkbox> It supports customized entities.</li>' +
                                '<li>And it\'s all fully collaborative!</li>' +
                                '</ul>' +
                                '</div>');
                    }
                });
                // An example of a complex custom entity.
                firepad.registerEntity('checkbox', {
                    render: function (info, entityHandler) {
                        var inputElement = document.createElement('input');
                        inputElement.setAttribute('type', 'checkbox');
                        if(info.checked) {
                            inputElement.checked = 'checked';
                        }
                        inputElement.addEventListener('click', function () {
                            entityHandler.replace({checked:this.checked});
                        });
                        return inputElement;
                    }.bind(this),
                    fromElement: function (element) {
                        var info = {};
                        if(element.hasAttribute('checked')) {
                            info.checked = true;
                        }
                        return info;
                    },
                    update: function (info, element) {
                        if (info.checked) {
                            element.checked = 'checked';
                        } else {
                            element.checked = null;
                        }
                    },
                    export: function (info) {
                        var inputElement = document.createElement('checkbox');
                        if(info.checked) {
                            inputElement.setAttribute('checked', true);
                        }
                        return inputElement;
                    }
                });
            }
            // Helper to get hash from end of URL or generate a random one.
            function getExampleRef() {
                var ref = firebase.database().ref();
                var hash = window.location.hash.replace(/#/g, '');
                if (hash) {
                    ref = ref.child(hash);
                } else {
                    ref = ref.push(); // generate unique location.
                    window.location = window.location + '#' + ref.key; // add it as a hash to the URL.
                }
                if (typeof console !== 'undefined') {
                    console.log('Firebase data: ', ref.toString());
                }
                return ref;
            }
        </script>
    </div>
    <% include footer %>
  </body>
</html>
